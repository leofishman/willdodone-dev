<?php
/**
 * @file
 * Primary module hooks for willdodone module.
 */
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\taxonomy\TermInterface;
use Drupal\task_field\Plugin\Field\FieldType\ProgressItem;
use Drupal\facets\Entity\Facet;


/**
 * Implements hook_form_alter().
 */
function willdodone_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $content_types = ['task', 'project'];
  $vocabularies = ['tags', 'goals'];

  if (in_array($form_id, array_map(function($type) { return "node_{$type}_form"; }, $content_types))) {
    foreach ($vocabularies as $vocabulary) {
      if (isset($form["field_{$vocabulary}"])) {
        $form["field_{$vocabulary}"]["widget"]["#selection_settings"]["filter"]["field_user"] = \Drupal::currentUser()->id();
      }
    }
  }
  if ($form_id == 'node_task_quickadd_form') {
    $form['#attached']['library'][] = 'willdodone/quick_add';
    $form['actions']['submit']['#ajax'] = [
      'callback' => '::quickAddAjaxCallback',
      'wrapper' => 'quick-add-wrapper',
    ];

  }
  if ($form_id =='comment_comment_form') {
      $form['#attached']['library'][] = 'willdodone/comment';
  }
}


function quickAddAjaxCallback(array &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  return $form['actions']['submit'];
}

/**
 * Implements hook_theme().
 */
function willdodone_theme() {
  return [
    'flag__timer' => [
      'variables' => [
        'attributes' => [],
        'title' => NULL,
        'action' => 'flag',
        'flag' => NULL,
        'flaggable' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function willdodone_theme_suggestions_timer_status(array $variables) {
  $suggestions = [];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'timer_status__' . $sanitized_view_mode;

  if (isset($variables['elements']['#entity_type'])) {
    $suggestions[] = 'timer_status__' . $variables['elements']['#entity_type'];
    $suggestions[] = 'timer_status__' . $variables['elements']['#entity_type'] . '__' . $sanitized_view_mode;
  }

  if (isset($variables['elements']['#bundle'])) {
    $suggestions[] = 'timer_status__' . $variables['elements']['#entity_type'] . '__' . $variables['elements']['#bundle'];
    $suggestions[] = 'timer_status__' . $variables['elements']['#entity_type'] . '__' . $variables['elements']['#bundle'] . '__' . $sanitized_view_mode;
  }

  return $suggestions;
}


/**
 * Implements hook_views_pre_render().
 */
function willdodone_views_pre_render($view) {
    if ($view->id() == 'projects' && $view->current_display == 'block_menu_projects') {
        $view->element['#attached']['library'][] = 'willdodone/global';
    }
}


/**
 * Implements hook_preprocess_HOOK().
 */
function willdodone_preprocess_facets_result_item(array &$variables) {

    if (isset($variables['facet']) && $variables['facet'] instanceof Facet && $variables['facet']->id() === 'progress_priority') {
        $priorityOptions = getDefaultPriorityOptions();

        $rawValue = $variables['raw_value'];
        if (array_key_exists($rawValue, $priorityOptions)) {
            $variables['value'] = $priorityOptions[$rawValue];
        } else {
            // Handle the case where the raw value is not a valid priority option
            $variables['value'] = t('Unknown Priority: ') . $variables['raw_value'];
        }
    }


}

function getDefaultPriorityOptions() {
    return [
        25 => t('Imminent'),
        20 => t('Urgent'),
        15 => t('Important'),
        10 => t('Normal'),
        5 => t('Low'),
        0 => t('None'),
    ];
}